diff -Naur a/nwmovies/binklib.c b/nwmovies/binklib.c
--- a/nwmovies/binklib.c	2009-02-23 13:35:24.000000000 +0100
+++ b/nwmovies/binklib.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,474 +0,0 @@
-/* 
- * SDL Wrapper Library.
- * Causes BinkPlayer to do all the right things so it 
- * can be used for "Native" movie play back /w NWN. 
- * 
- * Copyright (C) David Holland, March 2004
- * Copyright (C) David Holland, May 2008
- * Portions Copyright(C) lje/Jens 
- *
- * Includes suggestions and code by Skildron, and Eyrdan
- * 
- * No warrenties implied. 
- * Do what you want /w it so long as credit is given.
- * And you don't claim you wrote it yourself. 
- *
- */
-
-#define _GNU_SOURCE
-#include <stdio.h>
-#include <stdlib.h>
-#include <sys/types.h>
-#include <dirent.h>
-#include <limits.h>
-#include <dlfcn.h>
-#include <pwd.h>
-#include <unistd.h>
-#include <string.h>
-#include <errno.h>
-#include <sys/stat.h>
-#include <sys/fcntl.h>
-#include <SDL/SDL.h>
-#include <SDL/SDL_syswm.h>
-#include <time.h>
-#include <sys/time.h>
-#include <linux/rtc.h>
-#include <sys/ioctl.h>
-#include <assert.h>
-
-#include "nwmovies.h"
-
-#ifdef CRASH
-
-#include <signal.h>
-#include <execinfo.h>
-
-#endif
-
-// Overrides
-void (*__sdl_updaterects)(SDL_Surface *screen, int numrects, SDL_Rect *rects) = NULL; 
-SDL_Surface *(*__sdl_setvideomode)(int width, int height, int bpp, Uint32 flags) = NULL; 
-int (*__sdl_nanosleep)(const struct timespec *req, struct timespec *rem) = NULL;
-int (*__sdl_gettimeofday)(struct timeval *tv, struct timezone *tz) = NULL; 
-
-// Lookups - These must be available.
-static SDL_Surface *(*sdl_creatergbsurface_ptr)( Uint32 flags, int width, int height, int bitsPerPixel, 
-                                  Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask) = NULL;
-static void *(*sdl_freesurface_ptr)(SDL_Surface *surface) = NULL;
-static char *(*sdl_geterror_ptr)(void) = NULL;
-static int   (*sdl_getwminfo_ptr)(SDL_SysWMinfo *info) = NULL; 
-static int   (*sdl_upperblit_ptr)(SDL_Surface *src, SDL_Rect *srcrect, SDL_Surface *dst, SDL_Rect *dstrect) = NULL; 
-static int   (*xraisewindow_ptr)(Display *display, Window w) = NULL; 
-static int   (*sdl_showcursor_ptr)(int toggle) = NULL; 
-
-/* Optionally available */
-SDL_Surface *(*__sdl_zoomSurface)(SDL_Surface * src, double zoomx, double zoomy, int smooth) = NULL; 
-
-int __sdl_binkwidth = -1; 
-int __sdl_binkheight = -1; 
-int __sdl_fullscreen = 0; 
-int __sdl_smooth = 0; 
-int __sdl_scale = 0;
-int __sdl_debug = 0; 
-
-char	*__sdl_noperf = NULL;		/* Disable performance improvements */
-int	__sdl_window_raised = 0; 	/* Try to raise the BinkPlayer Window to top when playing full screen. */
-
-/* Needed due to this library may be preloaded for other exe's where we 
- * don't want to have nanosleep()/gettimeofday() overridden
- */ 
-int __sdl_enabled = 0; 
-
-float __sdl_scalex = 1.0; 
-float __sdl_scaley = 1.0; 
-
-SDL_Surface	*__sdl_screen_surface = NULL; 
-SDL_Surface	*__sdl_fake_surface; 
-
-#ifdef CRASH
-
-void binklib_sighandler(int sig) {
-	int	fd = -1 ;
-	char	msg[1024];
-	void	*array[1024];	/* large stack dump */
-	size_t	size;
-	pid_t	my_pid;
-	pid_t	pid;
-
-/* Write rudamentary crash log */
-	fd = open("/tmp/binklib_crash.log", O_CREAT | O_WRONLY, 0644 );
-
-	if( fd < 0 ) {
-		fd = fileno(stderr);
-	}
-	sprintf(msg, "Aieeeeeeee, BinkLib Crashed: %d\n", sig);
-	write(fd, msg, strlen(msg));
-
-	size = backtrace(array, 1024);
-	backtrace_symbols_fd(array, size, fd);
-
-	close(fd);
-
-/* Try for a more complex crash log */
-
-	fd = open("/tmp/binklib_crash.cmd", O_CREAT | O_WRONLY, 0644 );
-	if( fd < 0 ) {
-		exit(-1);
-	}
-	sprintf(msg, "where\n");
-	write(fd, msg, strlen(msg));
-
-	sprintf(msg, "quit\n");
-	write(fd, msg, strlen(msg));
-
-	close(fd);
-
-	putenv("LD_PRELOAD");	/* Unset the preload variable */
-	my_pid = getpid();
-
-	switch( pid = fork() ) {
-	case -1:
-		/* fork failed */
-		exit(-1);
-	case 0:
-		/* child */
-
-		sprintf(msg, "gdb /proc/%d/exe %d < /tmp/binklib_crash.cmd > /tmp/binklib_crash2.log 2>&1", my_pid, my_pid);
-		system(msg);
-		_exit(0);
-	default:
-		/* parent */
-		sleep(10);
-	}
-
-	exit(-1);
-}
-
-#endif
-
-void __sdl_initialize(void) __attribute__((constructor));
- 
-void __sdl_initialize(void) {
-	char	*env_string; 
-	struct	timeval	tv; 
-
-	void	*self_handle;
-	void	*self_ptr;
-	char	*self_name_ptr;
-	Dl_info	info;
-	void	*dlhandle; 
-	void	*x11_handle; 			/* XRaiseWindow doesn't seem to get imported automagically */
-
-#ifdef CRASH
-        signal(SIGBUS, binklib_sighandler);
-        signal(SIGSEGV, binklib_sighandler);
-#endif
-	/* Make certain we only enable ourselves only for BinkPlayer */
-
-        self_handle = dlopen("", RTLD_NOW | RTLD_GLOBAL);
-        self_ptr = dlsym(self_handle, "_init");
-        if( self_ptr == NULL || dladdr( self_ptr, &info ) <= 0 ) {
-                fprintf(stderr, "ERROR: BinkLib: dladdr(self: _init): %s\n", dlerror());
-                abort();
-        }
-        /* recycle library_name */
-        self_name_ptr = basename((char *)info.dli_fname);
-        if( strncmp( self_name_ptr, "BinkPlayer", PATH_MAX) != 0 ) {
-                dlclose(self_handle);
-                return;
-        }
-        dlclose(self_handle);
-	__sdl_enabled = 1; 		/* Enable ourselves. */
-
-	fprintf(stderr, "NOTICE: Loading BinkLib (%s)\n", _NWMOVIES_VERSION); 
-	if( getenv( "LD_PRELOAD" ) ) { 
-		fprintf(stderr, "NOTICE: Current LD_PRELOAD=%s\n", getenv("LD_PRELOAD")); 
-	} else { 
-		fprintf(stderr, "NOTICE: Current LD_PRELOAD=(NONE) - How did we get loaded btw?\n"); 
-	}
-
-	/* Lookup things in libSDL */
-
-sdl_creatergbsurface_ptr = dlsym(RTLD_NEXT, "SDL_CreateRGBSurface");
-if( sdl_creatergbsurface_ptr == NULL ) { fprintf(stderr, "ERROR: sdl_creatergbsurface_ptr == NULL: %s\n", dlerror()); abort(); }
-
-sdl_freesurface_ptr = dlsym(RTLD_NEXT, "SDL_FreeSurface");
-if( sdl_freesurface_ptr == NULL ) { fprintf(stderr, "ERROR: sdl_freesurface_ptr == NULL: %s\n", dlerror()); abort(); }
-
-sdl_geterror_ptr = dlsym(RTLD_NEXT, "SDL_GetError");
-if( sdl_geterror_ptr == NULL ) { fprintf(stderr, "ERROR: sdl_geterror_ptr == NULL: %s\n", dlerror()); abort(); }
-
-sdl_getwminfo_ptr = dlsym(RTLD_NEXT, "SDL_GetWMInfo");
-if( sdl_getwminfo_ptr == NULL ) { fprintf(stderr, "ERROR: sdl_getwminfo_ptr == NULL: %s\n", dlerror()); abort(); }
-
-sdl_upperblit_ptr = dlsym(RTLD_NEXT, "SDL_UpperBlit");
-if( sdl_upperblit_ptr == NULL ) { fprintf(stderr, "ERROR: sdl_upperblit_ptr == NULL: %s\n", dlerror()); abort(); }
-
-sdl_showcursor_ptr = dlsym(RTLD_NEXT, "SDL_ShowCursor");
-if( sdl_showcursor_ptr == NULL ) { fprintf(stderr, "ERROR: sdl_showcursor_ptr == NULL: %s\n", dlerror()); abort(); }
-
-x11_handle = dlopen("libX11.so", RTLD_NOW | RTLD_GLOBAL); 
-if( !x11_handle ) { 
-	printf("ERROR: Unable to dlopen(libX11.so): %s\n", dlerror()); 
-	abort(); 
-}
-
-xraisewindow_ptr = dlsym(x11_handle, "XRaiseWindow");
-if( xraisewindow_ptr == NULL ) { fprintf(stderr, "ERROR: xraisewindow_ptr == NULL: %s\n", dlerror()); abort(); }
-
-
-/********************************************************************************/
-
-	/* Lets try looking up the Zoom functions */
-	dlhandle = dlopen("libSDL_gfx.so", RTLD_NOW);
-	if( ! dlhandle ) { 
-		dlhandle = dlopen("./nwmovies/libSDL_gfx.so", RTLD_NOW); 
-		if( !dlhandle ) { 
-			/* Do this so the dlerror() call returns something intelligible */
-			dlhandle = dlopen("libSDL_gfx.so", RTLD_NOW);
-		}
-	} 
-
-	if( !dlhandle ) { 
-		fprintf(stderr, "NOTICE: ZoomSurface functions unavailable. The error was: %s\n", dlerror()); 
-	} else { 
-		__sdl_zoomSurface = dlsym(dlhandle, "zoomSurface"); 
-		if( __sdl_zoomSurface == NULL ) { 
-			fprintf(stderr, "NOTICE: ZoomSurface functions unavailable. The error was: %s\n", dlerror()); 
-		} else { 
-			fprintf(stderr, "NOTICE: ZoomSurface functions available.\n"); 
-		}
-	}
-	
-	/* Lookup the thing(s) we provide replacements for */
-	__sdl_updaterects = dlsym(RTLD_NEXT, "SDL_UpdateRects");
-if( __sdl_updaterects == NULL ) { fprintf(stderr, "ERROR: __sdl_updaterects == NULL: %s\n", dlerror()); abort(); }
-
-	__sdl_setvideomode = dlsym(RTLD_NEXT, "SDL_SetVideoMode"); 
-if( __sdl_setvideomode == NULL ) { fprintf(stderr, "ERROR: __sdl_setvideomode == NULL: %s\n", dlerror()); abort(); }
-
-	__sdl_nanosleep = dlsym(RTLD_NEXT, "nanosleep"); 
-if( __sdl_nanosleep == NULL ) { fprintf(stderr, "ERROR: __sdl_nanosleep == NULL: %s\n", dlerror()); abort(); }
-
-	__sdl_gettimeofday = dlsym(RTLD_NEXT, "gettimeofday"); 
-if( __sdl_gettimeofday == NULL ) { fprintf(stderr, "ERROR: __sdl_gettimeofday == NULL: %s\n", dlerror()); abort(); }
-
-	__sdl_noperf = getenv("BINK_NOPERF"); 
-
-	env_string = getenv("BINK_WIDTH"); 
-	if( env_string != NULL ) {
-		__sdl_binkwidth = atoi(env_string); 
-		if( __sdl_binkwidth <= 0 ) { __sdl_binkwidth = -1; } 
-	} 
-
-	env_string = getenv("BINK_HEIGHT"); 
-	if( env_string != NULL ) { 
-		__sdl_binkheight = atoi(env_string); 
-		if( __sdl_binkheight <= 0 ) { __sdl_binkheight = -1; } 
-	} 
-
-	env_string = getenv("BINK_FULLSCREEN"); 
-	if( env_string != NULL ) {
-		__sdl_fullscreen = atoi(env_string); 
-	} 
-
-	env_string = getenv("BINK_SMOOTH"); 
-	if( env_string != NULL ) {
-		__sdl_smooth = atoi(env_string); 
-	} 
-
-	env_string = getenv("BINK_SCALE"); 
-	if( env_string != NULL ) {
-		__sdl_scale = atoi(env_string); 
-	} 
-
-	__sdl_gettimeofday( &tv, NULL); 
-	fprintf(stderr, "%ld.%06ld: BinkLib: Initialized\n", tv.tv_sec, tv.tv_usec); 
-}
-
-void SDL_UpdateRects(SDL_Surface *fake_screen, int numrects, SDL_Rect *rects) {
-	int i; 
-	SDL_Surface 	*zoom_picture; 
-	SDL_Rect	dest; 
-	SDL_SysWMinfo	wminfo; 
-
-	struct	timeval	tv; 
-
-	if( !__sdl_enabled || __sdl_screen_surface == NULL ) {
-		__sdl_updaterects( fake_screen, numrects, rects); 
-		return; 
-	} 
-
-/* Hopefully we have a window by this point, and can lookup the Window ID, and
- * use XRaiseWindow() to bring the window to the foreground
- */
-
-	if( ! __sdl_window_raised ) { 
-		__sdl_window_raised = 1; 
-
-		if( __sdl_fullscreen ) { 
-			SDL_VERSION(&wminfo.version); 
-			if( sdl_getwminfo_ptr(&wminfo)) { /* We have data */
-				assert( wminfo.subsystem == SDL_SYSWM_X11 );    // We're not running on X11? 
-
-				wminfo.info.x11.lock_func();
-				xraisewindow_ptr( wminfo.info.x11.display, wminfo.info.x11.window ); 
-				wminfo.info.x11.unlock_func();
-
-			} else { 
-				fprintf(stderr, "WARNING: Failed to get WM Info\n"); 
-			}
-		}
-	}
-
-	if( __sdl_debug ) { 
-
-		for(i=0; i<numrects; i++) { 
-
-			__sdl_gettimeofday( &tv, NULL); 
-			fprintf(stderr, "%ld.%06ld: BinkLib: SDL_UpdateRects: %02d Screen: %p - X: %03d Y: %03d / W: %03d H: %03d\n", 
-				tv.tv_sec, tv.tv_usec, i,
-				fake_screen, 
-				rects[i].x, rects[i].y, 
-				rects[i].w, rects[i].h ); 
-
-		}
-	}
-
-	if( numrects == 1 && rects[0].x == 208 && rects[0].y == 114 && rects[0].w == 224 && rects[0].h == 252 ) { 
-		exit(0); 
-	} 
-	if( numrects == 1 && rects[0].x == 288 && rects[0].y == 174 && rects[0].w == 224 && rects[0].h == 252 ) {
-		exit(0); 
-	} 
-
-	if( __sdl_debug ) { 
-		fprintf(stderr, "\n\n"); 
-	} 
-
-	if( __sdl_scale && __sdl_zoomSurface != NULL ) { 
-		zoom_picture = __sdl_zoomSurface (fake_screen, __sdl_scalex, __sdl_scaley, __sdl_smooth);
-		if( zoom_picture != NULL ) { 
-			dest.x = (__sdl_screen_surface->w - zoom_picture->w) / 2;
-			dest.y = (__sdl_screen_surface->h - zoom_picture->h) / 2;
-			dest.w = zoom_picture->w;
-			dest.h = zoom_picture->h;
-			/* Ordinarily SDL_BlitSurface, but there's a redef that renames it to SDL_UpperBlit */
-			if (sdl_upperblit_ptr (zoom_picture, NULL, __sdl_screen_surface, &dest) < 0) {
-				fprintf (stderr, "Blit failed: %s\n", sdl_geterror_ptr ());
-			} 
-			sdl_freesurface_ptr (zoom_picture);
-		}
-	} else { 
-		dest.x = (__sdl_screen_surface->w - fake_screen->w) / 2;
-		dest.y = (__sdl_screen_surface->h - fake_screen->h) / 2;
-		dest.w = fake_screen->w;
-		dest.h = fake_screen->h;
-		/* Ordinarily SDL_BlitSurface, but there's a redef that renames it to SDL_UpperBlit */
-		if (sdl_upperblit_ptr (fake_screen, NULL, __sdl_screen_surface, &dest) < 0) {
-			fprintf (stderr, "Blit failed: %s\n", sdl_geterror_ptr ());
-		} 
-	}
-
-	dest.x = 0; 
-	dest.y = 0; 
-	dest.w = __sdl_screen_surface->w; 
-	dest.h = __sdl_screen_surface->h; 
-
-	__sdl_updaterects(__sdl_screen_surface, 1, &dest); 
-	return; 
-}
-
-SDL_Surface *SDL_SetVideoMode(int width, int height, int bpp, Uint32 flags) {
-	Uint32		my_flags; 
-
-	if( !__sdl_enabled ) { 
-		return( __sdl_setvideomode(width, height, bpp, flags) ); 
-	}
-
-	my_flags = flags; 
-	
-	if( (__sdl_binkwidth > 0 && __sdl_binkheight > 0) && (__sdl_binkwidth < width || __sdl_binkheight < height) ) { 
-		__sdl_scale = 1; 
-	}
-
-	if( __sdl_binkwidth > 0 ) { 
-		__sdl_scalex = (float)__sdl_binkwidth / width; 
-	} else { 
-		__sdl_binkwidth = width; 
-	} 
-	if( __sdl_binkheight > 0 ) { 
-		__sdl_scaley = (float)__sdl_binkheight / height; 
-	} else { 
-		__sdl_binkheight = height; 
-	} 
-
-	if( __sdl_fullscreen ) { 
-		my_flags = my_flags | SDL_FULLSCREEN; 
-	} else { 
-		my_flags = my_flags & ~SDL_FULLSCREEN; 
-	}
-
-	sdl_showcursor_ptr( SDL_DISABLE ); 
-
-/* Hey, you know, some comments here might of been useful....
- *
- * This creates a fake software surface for BinkPlayer to draw into. 
- * Binkplayer draws into our fake surface, and then inside UpdateRects
- * We either blit from the fake software surface directly back into the 
- * real screen surface (__sdl_screen_surface), or we use the zoom functions
- * to scale fake surface to real screen surface.
- */
-
-	__sdl_screen_surface = __sdl_setvideomode(__sdl_binkwidth, __sdl_binkheight, bpp, my_flags); 
-	if( __sdl_screen_surface != NULL ) { 
-	
-		/* Ordinarily SDL_AllocSurface, but there's a define that redef's it into SDL_CreateRGBSurface */	
-		__sdl_fake_surface = sdl_creatergbsurface_ptr( SDL_SWSURFACE, width, height, 32, 
-					__sdl_screen_surface->format->Rmask, __sdl_screen_surface->format->Gmask, 
-					__sdl_screen_surface->format->Bmask, __sdl_screen_surface->format->Amask ); 
-
-		if( __sdl_fake_surface == NULL ) { 
-			fprintf(stderr, "BinkLib: SDL_AllocSurface failed: %s\n", sdl_geterror_ptr());
-			return(NULL); 
-		} 
-
-		return( __sdl_fake_surface );
-	}
-
-	return( NULL ); 
-} 
-
-int nanosleep(const struct timespec *req, struct timespec *rem) { 
-	struct	timeval	tv; 
-	__sdl_gettimeofday( &tv, NULL); 
-
-	if( __sdl_debug ) { 
-		fprintf(stderr, "%ld.%06ld: BinkLib: Calling nanosleep(%ld.%06ld)\n", tv.tv_sec, tv.tv_usec, req->tv_sec, req->tv_nsec); 
-	}
-
-	if( !__sdl_enabled || __sdl_noperf != NULL ) { 
-		return( __sdl_nanosleep(req, rem) );
-	}
-
-	if( __sdl_nanosleep == NULL ) { return 0; } 
-	return( __sdl_nanosleep(req, rem) );
-}
-
-/* A discovery by lje found that wrapping this function so it 
-   pauses occasionally and ergo, lowers cpu dramatically. 
- */ 
-
-int __sdl_gtod_counter = 0;
-
-int gettimeofday(struct timeval *tv, struct timezone *tz) {
-	if( !__sdl_enabled || __sdl_noperf != NULL ) { 
-		return(__sdl_gettimeofday(tv, tz)); 
-	}
-
-	if ((++__sdl_gtod_counter) > 5) {
-		__sdl_gtod_counter = 0;
-		usleep(1);
-	}
-	return( __sdl_gettimeofday(tv, tz) );
-}
diff -Naur a/nwmovies/nwmovies.c b/nwmovies/nwmovies.c
--- a/nwmovies/nwmovies.c	2009-02-24 18:44:44.000000000 +0100
+++ b/nwmovies/nwmovies.c	2011-11-22 14:17:36.496026769 +0100
@@ -554,7 +554,7 @@
 	if (!title) {
 		snprintf(_NWM_playcmd, PATH_MAX, "ERROR moviename was NULL");
 	} else {
-		snprintf(_NWM_playcmd, PATH_MAX, "%s %s >> nwmovies.log 2>&1", "./nwmovies.pl", title);
+		snprintf(_NWM_playcmd, PATH_MAX, "%s %s >> nwmovies.log 2>&1", "./nwplaymovie", title);
 	}
 
 	fd = open("nwmovies.log", O_CREAT | O_APPEND | O_WRONLY, 0755 ) ;
diff -Naur a/nwmovies/nwmovies_install.pl b/nwmovies/nwmovies_install.pl
--- a/nwmovies/nwmovies_install.pl	2009-02-24 18:46:21.000000000 +0100
+++ b/nwmovies/nwmovies_install.pl	2011-11-22 14:23:40.236016152 +0100
@@ -16,7 +16,6 @@
 use vars qw( $gcc $cflags $ldflags );
 
 sub do_exec($);
-sub sound_check(); 
 
 if( exists( $ENV{"CC"} )) {
         $gcc = $ENV{"CC"};
@@ -37,7 +36,6 @@
 }
 
 if( !defined($ARGV[0]) || lc($ARGV[0]) ne "build" ) { 
-	sound_check(); 
 	exit(0); 
 }
 
@@ -58,10 +56,6 @@
 $command = sprintf("%s %s %s -Wall -I%s/libdis -g -fPIC -shared -Wl,-soname,libdisasm.so %s/libdis/libdis.c %s/libdis/i386.c -o %s/libdis/libdisasm.so",
 			 $gcc, $cflags, $x86_64, $ndir, $ndir, $ndir, $ndir );
 do_exec($command); 
-$command = sprintf("%s %s %s -Wall -shared -g -Wl,-soname,binklib.so %s/binklib.c -o %s/binklib.so %s -ldl -Wl,-static -lelf -lm -Wl,-Bdynamic",
-			$gcc, $cflags, $x86_64, $ndir, $ndir, $ldflags ); 
-do_exec($command); 
-
 $command = sprintf("%s %s %s -Wall -shared -g -I/usr/include/libelf -I%s/libdis -o %s/nwmovies.so %s/nwmovies.c %s/nwmovies_lookup.c %s/nwmovies_cookie.c %s/nwmovies_link.S %s -ldl -Wl,-static -lelf -Wl,-Bdynamic", 
 			$gcc, $cflags, $x86_64,  $ndir, $ndir, $ndir, $ndir, $ndir, $ndir, $ldflags ); 
 do_exec($command); 
@@ -74,7 +68,6 @@
 symlink("nwmovies/nwmovies.so", "nwmovies.so"); 
 
 printf("\n"); 
-sound_check(); 
 printf("\n"); 
 
 printf("NOTICE: NWMovies: Please check for errors above\n"); 
@@ -103,71 +96,3 @@
 	}
 	return; 
 }
-
-# Sound configuration check(s).
-
-sub sound_check() { 
-
-	my $ret; 
-	my @lines; 
-	my @words; 
-	my @subwords;
-	my $i; 
-	my $j; 
-
-	printf("NOTICE: Examining sound configuration for some clues...\n"); 
-	printf("NOTICE: Take this output with a grain of salt..\n\n"); 
-
-	# Check for ESD
-	$ret = open(CMD, "/usr/bin/pgrep esd |"); 
-	if( !defined($ret)) { 
-		printf("WARNING: Failed to spawn 'pgrep esd'\n"); 
-	} else { 
-		@lines = <CMD>; 
-		close(CMD); 
-		if( scalar( @lines ) != 0 ) { 
-			printf("NOTICE: It appears you have ESD running.\n"); 
-		}
-	}
-
-	# Check for ARTS
-	$ret = open(CMD, "/usr/bin/pgrep artsd |"); 
-	if( !defined($ret)) { 
-		printf("WARNING: Failed to spawn 'pgrep artsd'\n"); 
-	} else { 
-		@lines = <CMD>; 
-		close(CMD); 
-		if( scalar( @lines ) != 0 ) { 
-			printf("NOTICE: It appears you have KDE/ARTSD running.\n"); 
-		}
-	}
-
-	# At this point we check for ALSA
-	$ret = open(FILE, "/proc/asound/pcm"); 
-	if( !defined($ret) ) { 
-		printf("NOTICE: ALSA not present.\n"); 
-	} else { 
-		@lines = <FILE>; 
-		close(FILE); 
-		chomp(@lines);
-		if( scalar(@lines) == 0 ) { 
-			printf("NOTICE: No ALSA devices present.\n"); 
-		}
-		foreach $i (@lines) { 
-			@words = split(/:/, $i); 
-			foreach $j (@words) { 
-				if( $j =~ /playback/ ) { 
-					@subwords = split(/\s+/, $j);
-					if( $subwords[2] > 1 ) { 
-						printf("NOTICE: At least one ALSA device support multiple PCM playback channels\n");
-						return; 
-					} 
-				} 
-			}
-		} 
-		printf("NOTICE: It appears none of your PCM playback devices supports\n"); 
-		printf("NOTICE: more than one simultaneous channel.\n");
-		printf("NOTICE: You may need to look into software mixing, via dmix, or ESD/ARTSD.\n"); 
-	}
-	return; 
-}
diff -Naur a/nwmovies/nwmovies.pl b/nwmovies/nwmovies.pl
--- a/nwmovies/nwmovies.pl	2009-02-24 18:46:21.000000000 +0100
+++ b/nwmovies/nwmovies.pl	1970-01-01 01:00:00.000000000 +0100
@@ -1,283 +0,0 @@
-#!/usr/bin/perl 
-
-use strict; 
-use File::Basename;
-use File::Glob ':glob';
-
-use vars qw(@files $file $key %hash $command); 
-use vars qw(%binkhash); 
-use vars qw($played); 
-use vars qw($fullscreen $line @array); 
-use vars qw($height $width);
-use vars qw($ld_preload $moviepath $childpid);
-
-use vars qw($nwuser_loaded); 
-use vars qw($ret @skip_movies %skip_movies);
-
-use vars qw( @old_preload @new_preload $i );
-
-use vars qw( $mplayer $plaympeg $binkplayer ); 
-
-# Shush warnings in the x86_64 environment. 
-$nwuser_loaded = 0; 		# Presume 0.
-$ld_preload = $ENV{"LD_PRELOAD"}; 
-delete( @ENV{"LD_PRELOAD"} ); 
-
-$mplayer = qx{ which mplayer 2>/dev/null };
-$plaympeg = qx{ which plaympeg 2>/dev/null }; 
-$binkplayer = qx{ which BinkPlayer 2>/dev/null }; 
-
-if( $binkplayer eq "" && -x "./BinkPlayer" ) { 
-	$binkplayer = "./BinkPlayer";
-}
-
-if( $binkplayer eq "" && -x "./nwmovies/BinkPlayer" ) {
-	$binkplayer = "./nwmovies/BinkPlayer";
-}
-
-chomp($mplayer); 
-chomp($plaympeg); 
-chomp($binkplayer); 
-
-# Simple way to disable a specific movie player.  
-# Uncomment the player you want to disable. 
-
-# $mplayer = "";
-# $plaympeg = "";
-# $binkplayer = "";
-
-# Note both mplayer, and plaympeg must be unavailable, or uncommented
-# to try Bink support.
-
-# If you have SDL_gfx installed/symlinked inside of ~nwn and have a big enough
-# computer you may try to scale the movies fullscreen. 
-# FWIW a AMD dual 2600MP's is NOT fast enough to scale the movies
-# to 1600x1200.
-# A Q9300 however is enough to scale the movies to 1280x1024 w/ smothing
-#$ENV{"BINK_SCALE"} = 1; 		# Scale movie to full screen.
-#$ENV{"BINK_SMOOTH"} = 1; 		# Smooth the scaled movie for even 
-					# more CPU utilization. 
-
-#$ENV{"BINK_NOPERF"} = 1; 		# Disable some performance improvement code inside
-					# of BinkLib.so (Debugging mostly)
-
-printf("NOTICE: NWMovies.pl playing: %s: %s\n", $ARGV[0], scalar(localtime) ); 
-
-# Case insensitive movie selector.
-#
-# Do this the hard way due to some weirdness w/ perl & NWuser.
-# Note won't work if NWUser is modified for something other than $HOME/.nwn
-#
-
-$moviepath = "./movies"; 
-if( $ld_preload =~ /nwuser/ ) { 
-	printf("NOTICE: NWUser loaded. Examining \$HOME/.nwn/movies for movies as well.\n"); 
-	$nwuser_loaded = 1; 
-} 
-
-# Must remove NW* from the preload
-@old_preload = split(/:/, $ld_preload); 
-@new_preload = (); 
-foreach $i (@old_preload) {
-	if( !($i =~ /nwmovies/) && !($i =~/nwmouse/) && !($i =~/nwuser/) && !($i =~/nwlogger/)) { 
-		push(@new_preload); 
-	}
-}
-if( scalar(@new_preload) ) { 
-	$ld_preload = join(":", @new_preload); 
-	$ENV{"LD_PRELOAD"} = $ld_preload;
-} else { 
-	$ld_preload = ""; 
-	delete @ENV{"LD_PRELOAD"}; 
-}
-
-# Load the available files. 
-@files = (); 
-open(CMD, "ls ${moviepath} 2>/dev/null |") || die("ERROR: NWMovies.pl: Unable to spawn command: $!\n"); 
-while( $line = <CMD> ) { 
-	chomp($line); 
-	$line = "./movies/" . $line; 
-	push(@files, $line); 
-}
-close(CMD); 
-
-# Check for nwuser, and load the nwuser'd movies.
-if( $nwuser_loaded == 1) { 
-	open(CMD, "ls \$HOME/.nwn/movies 2>/dev/null |") || die("ERROR: NWMovies.pl: Unable to spawn command: $!\n"); 
-	while( $line = <CMD> ) { 
-		chomp($line); 
-		$line = "\$HOME/.nwn/movies/" . $line; 
-		push(@files, $line); 
-	}
-	close(CMD); 
-}
-
-# Per a suggestion by Skildron, allow users to skip specific movies (always) by creating a 
-# "nwmovies.skip" file in either the NWN directory or $HOME/.nwn.  This is useful if
-# you're actually using 'nwuser' and you've a movie installed in a global area, but 
-# really really don't want to watch it.   Note these are stored 1 per line, case
-# insensitive, but without the '.bik' extension. 
-
-@skip_movies = (); 
-if( -e "./nwmovies.skip" ) { 
-	printf("NOTICE: Attempting to read ./nwmovies.skip for movies to skip.\n"); 
-	$ret = open(SKIP, "./nwmovies.skip" );
-	if( ! $ret ) { 
-		printf("WARNING: NWMovies.pl unable to open skip file ./nwmovies.skip. Ignoring: $!\n");
-	} else { 
-		@skip_movies = <SKIP>; 
-		close(SKIP);
-	}
-}
-
-# Note, this allows "nwuser" to override a global nwmovies.skip.
-if( $nwuser_loaded && -e $ENV{"HOME"} . "/.nwn/nwmovies.skip" ) { 
-	printf("NOTICE: Attempting to read %s/.nwn/nwmovies.skip for movies to skip.\n", $ENV{"HOME"} ); 
-	$ret = open(SKIP, $ENV{"HOME"} . "/.nwn/nwmovies.skip" );
-	if( ! $ret ) { 
-		printf("WARNING: NWMovies.pl unable to open skip file %s/.nwn/nwmovies.skip. Ignoring: $!\n", $ENV{"HOME"} );
-	} else { 
-		@skip_movies = <SKIP>; 
-		close(SKIP);
-	}
-}
-
-# Convert movie list into hash, so we can use exist later on. 
-%skip_movies = (); 
-if( scalar(@skip_movies) ) { 
-	chomp(@skip_movies); 
-	foreach (@skip_movies) { $skip_movies{ lc($_) } = 1; } 
-}
-#### Movies to be skipped is now in %skip_movies
-#
-if( exists( $skip_movies{ lc($ARGV[0]) } ) ) { 
-	#want to skip, bye..
-	printf("NOTICE: Skipping %s, listed in nwmovies.skip.\n", $ARGV[0]); 
-	exit(1); 
-}
-
-# Create a hash of %{ lc(moviename) } -> pathname 
-foreach $file (@files) { 
-
-	$key = lc($file); 
-	if ( substr( $key, -3 ) ne "bik" ) { 
-		$key = basename($key); 
-		$key = fileparse($key, qr{\..*});
-	
-		$hash{ $key } = $file; 
-	} else { 
-		$key = basename($key); 
-		$key = fileparse($key, qr{\..*});
-	
-		$binkhash{ $key } = $file; 
-	}
-}
-
-# braindead, but functional INI parser 
-
-$fullscreen = 1; 			# Presume fullscreen
-$width = 800;
-$height = 600;
-open(INI, "./nwn.ini") || die("ERROR: NWMovies.pl: Unable to open INI file: $!\n"); 
-while( $line = <INI> ) { 
-	chomp($line); 
-	if( index( lc($line), "fullscreen" ) >= 0 ) {
-		@array = split(/=/, $line); 
-		$fullscreen = $array[1] + 0; 
-	}
-	if( index( lc($line), "width" ) >= 0 ) { 
-		@array = split(/=/, $line); 
-		$width = $array[1] + 0; 
-	}
-	if( index( lc($line), "height" ) >= 0 ) { 
-		@array = split(/=/, $line); 
-		$height = $array[1] + 0; 
-	}
-} 
-close(INI);
-
-if( exists( $hash{ lc($ARGV[0]) } )  || exists( $binkhash{ lc($ARGV[0]) } )   ) { 
-
-	if( $mplayer eq "" && $plaympeg eq "" && $binkplayer eq "" ) { 
-		printf("ERROR: No movie player located, not playing anything.\n"); 
-		exit(1); 
-	}
-
-	$played = 0; 		#  Changes to one if we've found a player, and played something. 
-
-# Prefer BinkPlayer, followed by Mplayer at this point. 
-
-	if( $binkplayer ne "" && !$played ) {
-
-		# The BinkPlayer Understands these variables w/ the preloaded library
- 		# BINK_WIDTH, BINK_HEIGHT, BINK_FULLSCREEN, BINK_SMOOTH, BINK_SCALE
-
-		if( $ld_preload ne "" ) { 
-			$ld_preload = "./nwmovies/binklib.so:" . $ld_preload;
-		} else { 
-			$ld_preload = "./nwmovies/binklib.so";
-		}
-
-		if( $fullscreen ) { 
-			$ENV{"BINK_WIDTH"}=$width;
-			$ENV{"BINK_HEIGHT"}=$height;
-			$ENV{"BINK_FULLSCREEN"}=1;
-			$command = sprintf("%s %s", $binkplayer, $binkhash{ lc($ARGV[0]) } ); 
-		} else { 
-			$ENV{"BINK_FULLSCREEN"}=0; 
-			$command = sprintf("%s %s", $binkplayer, $binkhash{ lc($ARGV[0]) } ); 
-		}
-		$played = 1; 
-	}
-
-	if( $mplayer ne "" && !$played ) { 
-		if( $fullscreen ) { 
-			# Note:  -vo x11 also works for older versions of mplayer
-			$command = sprintf("%s -x %s -y %s -vo sdl -vm %s", $mplayer, $width, $height, $hash{ lc($ARGV[0]) } ); 
-		} else { 
-			# Note:  -vo x11 also works for older versions of mplayer
-			$command = sprintf("%s -x %s -y %s -vo sdl %s", $mplayer, $width, $height, $hash{ lc($ARGV[0]) } ); 
-		}
-		$played = 1; 
-	}
-
-
-	if( $plaympeg ne "" && !$played ) { 	
-		if( !defined( $hash{ lc($ARGV[0]) } ) ) { 
-			if( $fullscreen ) { 
-				$command = sprintf("%s --scale %sx%s --fullscreen %s", $plaympeg, $width, $height, $hash{ lc($ARGV[0]) } ); 
-			} else { 
-				$command = sprintf("%s --scale %sx%s %s", $plaympeg, $width, $height, $hash{ lc($ARGV[0]) } ); 
-			}
-		} else { 
-			if( $fullscreen ) { 
-				$command = sprintf("%s --scale %sx%s --fullscreen %s", $plaympeg, $width, $height, $hash{ lc($ARGV[0]) } ); 
-			} else { 
-				$command = sprintf("%s --scale %sx%s %s", $plaympeg, $width, $height, $hash{ lc($ARGV[0]) } ); 
-			}
-		}
-		$played = 1; 
-	}
-
-	printf("NOTICE: NWMovies: Executing: %s\n", $command); 
-
-# Converted to fork/exec
-#	system($command); 
-
-	if (!defined($childpid = fork())) {
-    		printf("ERROR: NWMovies.pl: cannot fork: $!\n");
-	} elsif ($childpid == 0) {
-		$ENV{"LD_PRELOAD"} = $ld_preload;
-    		exec("$command");
-    		printf("ERROR: NWMovies.pl: can't exec $command: $!\n"); 
-	} else { 
-    		waitpid($childpid, 0);
-	} 
-
-} else { 
-	printf("ERROR: NWMovies.pl: Missing movie file: %s\n", $ARGV[0]); 
-}
-
-printf("NOTICE: NWMovies.pl finished playing: %s: %s\n", $ARGV[0], scalar(localtime) ); 
-exit(0); 
-
diff -Naur a/nwmovies/nwmovies.README.soundcard.txt b/nwmovies/nwmovies.README.soundcard.txt
--- a/nwmovies/nwmovies.README.soundcard.txt	2009-02-23 13:35:24.000000000 +0100
+++ b/nwmovies/nwmovies.README.soundcard.txt	1970-01-01 01:00:00.000000000 +0100
@@ -1,159 +0,0 @@
-These are some notes regarding NWN, and the various options for sound. 
-
-Linux has multiple different ways to output sound, all with various
-benefits, and detractions.   They can be broken down multiple ways: 
-
-OSS
-ALSA
-
-ESD
-ARTSC
-PulseAudio
-
-----------------------------------------------------------------------------
-
-OSS:  The original sound API.  Fairly old, and not much in use. 
-ALSA: The "Advanced Linux Sound Architecture", the more modern sound API.
-
-With either sound API, presuming a correct install, one of the main source 
-of the "no sound" issue is rooted in the either sound API to support playing 
-multiple sounds, by multiple programs, at the same time. 
-
-OSS does not support multiple programs playing sounds, so basically, the
-first program to grab the sound device, gets it, and keeps it till its
-done. 
-
-ALSA will support multiple programs playing sound, if your sound card
-supports it, or you if you configure "software mixing" via something called
-DMIX.
-
-Note, this software mixing issue also effects NWMovies, as both NWN, and
-BinkPlayer often fight over the soundcard.  (BinkPlayer tends to lose. :) ) 
-
-----------------------------------------------------------------------------
-
-As a general rule, onboard sound devices tend to only support playing one
-sound at a time, where as dedicated sound cards tend support more than one. 
-
-If you examine the output of "cat /proc/asound/pcm" from a terminal window
-you can determine the number of simultaneous sounds ALSA can play at one
-time.   
-
-uholld1@crusader:~$ cat /proc/asound/pcm
-00-02: ALC883 Analog : ALC883 Analog : capture 2
-00-01: ALC883 Digital : ALC883 Digital : playback 1 : capture 1
-00-00: ALC883 Analog : ALC883 Analog : playback 1 : capture 2
-
-Note the last line.  There's only 1 Analog "playback" device.  IE: My
-soundcard can only play one sound at a time. 
-
-----------------------------------------------------------------------------
-
-To deal with the issue of only one playing one sound at a time, the concept
-of "software mixing" has evolved.   This has so far taken the form of a
-system daemon running in the background, or in ALSA's case something called
-DMIX that must be configured first. 
-
-The common daemons: 
-
-ESD:  Is generally used with the Gnome Desktop.
-ARTSC: Is generally used with the KDE Desktop.
-PulseAudio:  Is a very new sound system daemon, used in very new
-distributions, such as FedoraCore 9, and Ubuntu 8.04, and quite frankly, 
-I've no experience with it.
-
-DMIX is part of the ALSA API, and once configured, should be transparent. 
-
-The libSDL provided with NWN, in the NWN/lib directory is
-fairly old, and does not support ALSA, nor PulseAudio.
-
-----------------------------------------------------------------------------
-
-libSDL is supposed to be smart enough to choose the "best" audio driver
-that it supports, and is availble on your system.  
-
-As said above, the libSDL supplied with NWN is old, and does not support
-ALSA, nor PulseAudio.  The recommendation therefore is to modify the
-LD_LIBRARY_PATH entry in the nwn startup script, and remove the reference
-to "./lib".   NWN will then use the system libSDL, which is most likely
-much new, and supports more sound options.
-
-If you wish to override the audio driver selected, you may use the
-SDL_AUDIODRIVER environment variable to specify a specific audio driver.
-
-See: http://www.libsdl.org/cgi/docwiki.cgi/SDL_envvars for further details. 
-
-----------------------------------------------------------------------------
-
-The output of "nwmovies_install.pl" will hopefully give you some clues as
-to how your audio system is configured.
-
-In my opinion the safest and best bet for sound output is to go straight to
-ALSA, and use DMIX for software mixing, if necessary. 
-
-* If you need to configure DMIX, See below for a sample .asoundrc to save in
-your home directory. (My thanks to Skildron for supplying it)
-
-* Force libSDL to use ALSA by adding the following line to your NWN startup
-  script 'nwn'
-
-  export SDL_AUDIODRIVER=alsa
-
-* If you are currently using one of the sound system daemons, you will need
-  to shut it down before starting NWN. kk
-
-For ESD:         esdctl standby; ./nwn
-For ARTS:        artsshell suspend; ./nwn
-
-For PulseAudio:  pasuspender ./nwn
-
-----------------------------------------------------------------------------
-
-If you wish to investigate attempting to get NWN to work with your 
-currently running sound daemons the following may be of some use.
-
-* The manpage for "esddsp" 
-* The manpage for "artsdsp"
-
-The following webpage for PulseAudio:
-
-http://www.pulseaudio.org/wiki/PerfectSetup
-
-And of course, the http://www.libsdl.org/cgi/docwiki.cgi/SDL_envvars for 
-libSDL configuration.
-
-----------------------------------------------------------------------------
-Sample .asoundrc
-----------------------------------------------------------------------------
-
-pcm.!default {
-	type plug
-	slave.pcm "dmixer"
-}
-
-pcm.dsp0 {
-	type plug
-	slave.pcm "dmixer"
-}
-
-pcm.dmixer {
-	type dmix
-	ipc_key 1024
-	slave {
-		pcm "hw:0,0"
-		period_time 0
-		period_size 1024
-		buffer_size 8192
-		rate 48000
-	}
-	bindings {
-		0 0
-		1 1
-	}
-}
-
-ctl.dmixer {
-	type hw
-	card 0
-}
-
diff -Naur a/nwplaymovie b/nwplaymovie
--- a/nwplaymovie	1970-01-01 01:00:00.000000000 +0100
+++ b/nwplaymovie	2011-11-22 15:07:00.000000000 +0100
@@ -0,0 +1,30 @@
+#! /bin/bash
+
+shopt -s nullglob
+
+nwmovies.getFile() {
+  local -r MOVIE_PATH="movies"
+  local -A movieTable=([""]:"")
+  local i
+  local t
+
+  for i in "${MOVIE_PATH}/"*.bik; do
+    t=$(basename "${i%.*}")
+    if [ "x${t,,*}" = "x${1,,*}" ]; then
+      echo "${i}"
+      return 0
+    fi
+  done
+
+  return 1
+}
+
+nwmovies.play() {
+  local movieFile
+  movieFile=$(nwmovies.getFile "${1}") &&
+  [ -f "$movieFile" ] &&
+  mplayer -use-filedir-conf "${movieFile}" &> /dev/null ||
+  return 1
+}
+
+nwmovies.play "${@}"
